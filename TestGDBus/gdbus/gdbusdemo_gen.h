/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef ___HOME_CG_GITHUB_WORKBOOK_TESTGDBUS_GDBUS_GDBUSDEMO_GEN_H__
#define ___HOME_CG_GITHUB_WORKBOOK_TESTGDBUS_GDBUS_GDBUSDEMO_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.company.project.dbus.s */

#define TYPE_COM_COMPANY_PROJECT_DBUS_S (com_company_project_dbus_s_get_type ())
#define COM_COMPANY_PROJECT_DBUS_S(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S, ComCompanyProjectDbusS))
#define IS_COM_COMPANY_PROJECT_DBUS_S(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S))
#define COM_COMPANY_PROJECT_DBUS_S_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S, ComCompanyProjectDbusSIface))

struct _ComCompanyProjectDbusS;
typedef struct _ComCompanyProjectDbusS ComCompanyProjectDbusS;
typedef struct _ComCompanyProjectDbusSIface ComCompanyProjectDbusSIface;

struct _ComCompanyProjectDbusSIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_value) (
    ComCompanyProjectDbusS *object,
    GDBusMethodInvocation *invocation,
    gint arg_type,
    const gchar *arg_input_array);

  gboolean (*handle_set_value) (
    ComCompanyProjectDbusS *object,
    GDBusMethodInvocation *invocation,
    gint arg_type,
    const gchar *arg_input_array);

  void (*message) (
    ComCompanyProjectDbusS *object,
    const gchar *arg_message_array);

};

GType com_company_project_dbus_s_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *com_company_project_dbus_s_interface_info (void);
guint com_company_project_dbus_s_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void com_company_project_dbus_s_complete_set_value (
    ComCompanyProjectDbusS *object,
    GDBusMethodInvocation *invocation,
    gint result);

void com_company_project_dbus_s_complete_get_value (
    ComCompanyProjectDbusS *object,
    GDBusMethodInvocation *invocation,
    const gchar *output_array,
    gint result);



/* D-Bus signal emissions functions: */
void com_company_project_dbus_s_emit_message (
    ComCompanyProjectDbusS *object,
    const gchar *arg_message_array);



/* D-Bus method calls: */
void com_company_project_dbus_s_call_set_value (
    ComCompanyProjectDbusS *proxy,
    gint arg_type,
    const gchar *arg_input_array,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_company_project_dbus_s_call_set_value_finish (
    ComCompanyProjectDbusS *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean com_company_project_dbus_s_call_set_value_sync (
    ComCompanyProjectDbusS *proxy,
    gint arg_type,
    const gchar *arg_input_array,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void com_company_project_dbus_s_call_get_value (
    ComCompanyProjectDbusS *proxy,
    gint arg_type,
    const gchar *arg_input_array,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_company_project_dbus_s_call_get_value_finish (
    ComCompanyProjectDbusS *proxy,
    gchar **out_output_array,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean com_company_project_dbus_s_call_get_value_sync (
    ComCompanyProjectDbusS *proxy,
    gint arg_type,
    const gchar *arg_input_array,
    gchar **out_output_array,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_COM_COMPANY_PROJECT_DBUS_S_PROXY (com_company_project_dbus_s_proxy_get_type ())
#define COM_COMPANY_PROJECT_DBUS_S_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S_PROXY, ComCompanyProjectDbusSProxy))
#define COM_COMPANY_PROJECT_DBUS_S_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_COMPANY_PROJECT_DBUS_S_PROXY, ComCompanyProjectDbusSProxyClass))
#define COM_COMPANY_PROJECT_DBUS_S_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S_PROXY, ComCompanyProjectDbusSProxyClass))
#define IS_COM_COMPANY_PROJECT_DBUS_S_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S_PROXY))
#define IS_COM_COMPANY_PROJECT_DBUS_S_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_COMPANY_PROJECT_DBUS_S_PROXY))

typedef struct _ComCompanyProjectDbusSProxy ComCompanyProjectDbusSProxy;
typedef struct _ComCompanyProjectDbusSProxyClass ComCompanyProjectDbusSProxyClass;
typedef struct _ComCompanyProjectDbusSProxyPrivate ComCompanyProjectDbusSProxyPrivate;

struct _ComCompanyProjectDbusSProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ComCompanyProjectDbusSProxyPrivate *priv;
};

struct _ComCompanyProjectDbusSProxyClass
{
  GDBusProxyClass parent_class;
};

GType com_company_project_dbus_s_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComCompanyProjectDbusSProxy, g_object_unref)
#endif

void com_company_project_dbus_s_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComCompanyProjectDbusS *com_company_project_dbus_s_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ComCompanyProjectDbusS *com_company_project_dbus_s_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void com_company_project_dbus_s_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComCompanyProjectDbusS *com_company_project_dbus_s_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ComCompanyProjectDbusS *com_company_project_dbus_s_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_COM_COMPANY_PROJECT_DBUS_S_SKELETON (com_company_project_dbus_s_skeleton_get_type ())
#define COM_COMPANY_PROJECT_DBUS_S_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S_SKELETON, ComCompanyProjectDbusSSkeleton))
#define COM_COMPANY_PROJECT_DBUS_S_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_COMPANY_PROJECT_DBUS_S_SKELETON, ComCompanyProjectDbusSSkeletonClass))
#define COM_COMPANY_PROJECT_DBUS_S_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S_SKELETON, ComCompanyProjectDbusSSkeletonClass))
#define IS_COM_COMPANY_PROJECT_DBUS_S_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_COMPANY_PROJECT_DBUS_S_SKELETON))
#define IS_COM_COMPANY_PROJECT_DBUS_S_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_COMPANY_PROJECT_DBUS_S_SKELETON))

typedef struct _ComCompanyProjectDbusSSkeleton ComCompanyProjectDbusSSkeleton;
typedef struct _ComCompanyProjectDbusSSkeletonClass ComCompanyProjectDbusSSkeletonClass;
typedef struct _ComCompanyProjectDbusSSkeletonPrivate ComCompanyProjectDbusSSkeletonPrivate;

struct _ComCompanyProjectDbusSSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ComCompanyProjectDbusSSkeletonPrivate *priv;
};

struct _ComCompanyProjectDbusSSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType com_company_project_dbus_s_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComCompanyProjectDbusSSkeleton, g_object_unref)
#endif

ComCompanyProjectDbusS *com_company_project_dbus_s_skeleton_new (void);


G_END_DECLS

#endif /* ___HOME_CG_GITHUB_WORKBOOK_TESTGDBUS_GDBUS_GDBUSDEMO_GEN_H__ */
